# environment-specs.ini
#
#------------------------------------------------------------------------------
#
# This is a configuration file for the `LoadEnv` tool, allowing you to specify
# what is necessary to create each of your environments.  Environments are
# grouped by system (see `supported-systems.ini`).  The syntax for a section
# specifying an environment is as follows:
#
#   [environment-name]
#   # list
#   # of
#   # commands
#
# The `environment-name` can be any string.  The recommended convention is to
# use `<system-name>-<compiler>-<compiler-version>-<mpi>-<mpi-version>-
# <node-type>`, where `<node-type>` is either `serial` or `openmp` and is not
# applicable to CUDA environments.  These names (excepting the `<system-name>-`
# prefix) must match what appears in `supported-envs.ini` for the given system.
#
# The commands that can be used within a section to establish an environment
# are the following:
#
#   * `use section_name`:  Inserts the contents of the section_name section in
#     place of this statement.
#   * `envvar-set envvar : value`:  Sets (or overwrites) an environment
#     variable.
#   * `envvar-append envvar : value`:  Append a value to an existing
#     environment variable.
#   * `envvar-prepend envvar : value`:  Prepend a value to an existing
#     environment variable.
#   * `envvar-remove envvar`:  Removes all occurrences of `envvar` from the
#     list of actions to be applied.
#   * `envvar-unset envvar`:  Unsets (removes) an environment variable, if it
#     exists.
#   * `envvar-remove-substr`:  Removes all occurrences of `substr` from
#     `envvar`.
#   * `envvar-remove-path-entry`:  Removes occurrences of a `path` from a path
#     `envvar`.
#   * `envvar-find-in-path`:  Locate an executable in your path and store the
#     location in the `envvar`.
#   * `envvar-assert-not-empty`:  Throw an error if the `envvar` is not set or
#     is empty.
#   * `module-load module_name : version`:  Load a module.
#   * `module-purge`:  Purge all loaded modules.
#   * `module-remove module_name`:  Removes all uses of `module_name` from the
#     list of actions to be applied.
#   * `module-swap module_old : module_new/nersion`:  Swaps two modules.
#   * `module-unload module_name`:  Unloads a module.
#   * `module-use path`:  Adds a path to modulefiles.
#
# It is possible to create sections within the file that do not correspond to a
# complete environment, but rather are intended to be `use`d within other
# environments.  In such cases, the recommended convention for the section name
# is to use ALL-CAPS, and pick something representative of where it will be
# used, e.g., use `[ATS2]` to collect operations that are common to all
# `[machine-type-2_*]` environments.
#
# Note:
#   The operations in a section will be executed in the order in which they
#   appear, so you need to be careful with the ordering of `use` statements and
#   loading metamodules.
#
#------------------------------------------------------------------------------
#
# Modifying an Existing Environment
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# To make modifications to an existing environment, the process is:
#
#   1. Find the environment you need to modify within the file.
#   2. Modify the list of commands under that `[environment-name]` section
#      heading (see the command list above) to modify the environment
#      appropriately:
#      * Change environment variables.
#      * Change modules loaded.
#
# Note:
#   It is not recommended that you change the versions of the compiler or MPI
#   implementation for an existing environment.  Instead see below to add a new
#   environment.
#
# Note:
#   If you need to modify multiple environments on a system in the exact same
#   way, there should be a `[SYSTEM-NAME]` section that gets `use`d in the
#   individual environments themselves.  Modify that section instead.  If that
#   section does not yet exist, see the note below under adding a new
#   environment.
#
#------------------------------------------------------------------------------
#
# Adding a New Environment to an Existing System
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# To stand up a new environment on a currently supported system, the process
# is:
#
#   1. Find the system to which you would like to add the new environment.
#   2. Determine a new environment name (see above for the naming convention).
#   3. Add a new `[environment-name]` section heading under the given system.
#      Environment names are organized alphabetically for any given system.
#   4. Create a list of commands under that `[environment-name]` section
#      heading (see the command list above) to establish the environment
#      appropriately:
#      * Set/alter environment variables.
#      * Load modules.
#
# Note:
#   If there are any commonalities shared by multiple environments on a certain
#   system:
#   1. Create a `[SYSTEM-NAME]` section to collect the common operations.
#   2. Remove the common operations from the environments from which they were
#      taken.
#   3. Insert a `use SYSTEM-NAME` statement in each of the environments from
#      which commonalities were removed.
#
#------------------------------------------------------------------------------
#
# Removing an Environment
# ~~~~~~~~~~~~~~~~~~~~~~~
#
# When a particular environment is no longer needed---for instance, if a new
# environment was stood up to replace it and it's been sufficiently
# vetted---the process to remove an environment is:
#
#   1. Find the environment you wish to remove in the file.
#   2. Remove the `[environment-name]` section heading and any commands listed
#      underneath it.
#
#------------------------------------------------------------------------------
#
# Adding a New Environment for a New System
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# When standing up a completely new system, the procedure is:
#
#   1. Add the new system to `supported-systems.ini`.
#   2. Add the environment to be supported on that system to
#      `supported-envs.ini`.
#   3. Create a new system comment block in the file by copying and pasting an
#      existing one and modifying the system name.  The systems are organized
#      alphabetically within the file.
#   4. Create one or more new environments for the new system.  See above for
#      how to add a new environment.
#
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
# Common environment options not specific to a particular system.
#------------------------------------------------------------------------------

[COMPILER-VARS]
envvar-set CC  : mpicc
envvar-set CXX : mpicxx
envvar-set FC  : mpif77
envvar-set F90 : mpif90

[MODULE-PURGE]
module-purge

[MPI-COMPILER-VARS]
envvar-find-in-path MPICC  : mpicc
envvar-find-in-path MPICXX : mpicxx
envvar-find-in-path MPIF90 : mpif90

[OMPI-CLANG-VARS]
envvar-find-in-path OMPI_CXX : clang++
envvar-find-in-path OMPI_CC  : clang
envvar-find-in-path OMPI_FC  : gfortran

[OMPI-GNU-VARS]
envvar-find-in-path OMPI_CXX : g++
envvar-find-in-path OMPI_CC  : gcc
envvar-find-in-path OMPI_FC  : gfortran

[OMPI-INTEL-VARS]
envvar-find-in-path OMPI_CXX : icpc
envvar-find-in-path OMPI_CC  : icc
envvar-find-in-path OMPI_FC  : ifort


#------------------------------------------------------------------------------
# rhel7
#------------------------------------------------------------------------------

# Partial environments intended to be `use`d within others.

################################################################################
# module env settings
################################################################################

[RHEL7_PRE]
use MODULE-PURGE
module-use                     : /projects/sems/modulefiles/projects
module-load sems-env

################################################################################
# explicit paths for GenConfig
################################################################################

[RHEL7_POST]
#module-load sparc-tools/python : 3.7.9
#use RHEL7_SIERRA-PYTHON-3.6.10
envvar-set-if-empty SEMS_PARMETIS_LIBRARY_PATH : ${SEMS_PARMETIS_ROOT}/lib
envvar-set-if-empty SEMS_PARMETIS_INCLUDE_PATH : ${SEMS_PARMETIS_ROOT}/include
envvar-set-if-empty SEMS_BOOST_LIBRARY_PATH    : ${SEMS_BOOST_ROOT}/lib
envvar-set-if-empty SEMS_BOOST_INCLUDE_PATH    : ${SEMS_BOOST_ROOT}/include
envvar-set-if-empty SEMS_HDF5_LIBRARY_PATH     : ${SEMS_HDF5_ROOT}/lib
envvar-set-if-empty SEMS_HDF5_INCLUDE_PATH     : ${SEMS_HDF5_ROOT}/include
envvar-set-if-empty SEMS_ZLIB_LIBRARY_PATH     : ${SEMS_ZLIB_ROOT}/lib
envvar-set-if-empty SEMS_ZLIB_INCLUDE_PATH     : ${SEMS_ZLIB_ROOT}/include
envvar-set-if-empty LAPACK_LIBRARIES           : /usr/lib64/liblapack.so
envvar-set-if-empty DL_LIBRARIES               : /usr/lib64/libdl.so

################################################################################
# sems env settings
################################################################################

[RHEL7_SEMS]
module-load         sems-git           : 2.10.1
module-load         sems-cmake         : 3.19.1
module-load         sems-ninja_fortran : 1.10.0
module-load         sems-zlib          : 1.2.8/base
module-load         sems-boost         : 1.63.0/base
module-load         sems-superlu       : 4.3/base
envvar-set          HWLOC_LIBS         : -lhwloc
envvar-set          BOOST_ROOT         : ${SEMS_BOOST_ROOT}
envvar-set          HDF5_ROOT          : ${SEMS_HDF5_ROOT}
envvar-set          NETCDF_ROOT        : ${SEMS_NETCDF_ROOT}
envvar-set          NetCDF_ROOT        : ${SEMS_NETCDF_ROOT}
envvar-set-if-empty SEMS_PNETCDF_ROOT  : ${SEMS_NETCDF_ROOT}
envvar-set          PNETCDF_ROOT       : ${SEMS_PNETCDF_ROOT}
module-unload       sems-python

[RHEL7_SEMS_PARALLEL]
module-load         sems-openmpi      : 1.10.1
module-load         sems-netcdf       : 4.7.3/parallel
module-load         sems-hdf5         : 1.10.6/parallel
module-load         sems-scotch       : 6.0.3/nopthread_64bit_parallel
module-load         sems-parmetis     : 4.0.3/parallel
envvar-set-if-empty BLAS_LIBRARIES    : /usr/lib64/libblas.so.3
use RHEL7_SEMS

# This section is to work around a module-load ordering issue where our tools
# load scotch and superlu_dist before the compiler stack & mpi is loaded
[RHEL7_SEMS_PARALLEL_INTEL]
use RHEL7_SEMS_PARALLEL
use RHEL7_SEMS
module-remove sems-openmpi
module-remove sems-superlu
module-load sems-superlu_dist : 5.2.2/32bit_parallel
envvar-set BLAS_LIBRARIES     : /usr/lib64/libblas.so
envvar-set-if-empty LDFLAGS   : ""
envvar-set          LDFLAGS   : ${LDFLAGS} -lifcore -qopenmp

[RHEL7_SEMS_BASE]
module-load sems-hdf5: 1.10.6/base
module-load sems-netcdf: 4.7.3/base
module-load sems-metis: 5.1.0/base
envvar-set-if-empty SEMS_METIS_LIBRARY_PATH    : ${SEMS_METIS_ROOT}/lib
envvar-set-if-empty SEMS_METIS_INCLUDE_PATH    : ${SEMS_METIS_ROOT}/include
envvar-set-if-empty BLAS_LIBRARIES             : /usr/lib64/libblas.so
use RHEL7_SEMS

################################################################################
# python env settings
################################################################################

[RHEL7_PYTHON]
envvar-find-in-path PYTHON_EXECUTABLE : python3

[RHEL7_SIERRA-PYTHON-3.6.10]
setenv MANPATH  : "/projects/sierra/linux_rh7/install/Python/3.6.10/share/man"
setenv PATH_TMP : "/projects/sierra/linux_rh7/install/Python/extras/bin:${PATH}"
setenv PATH     : "/projects/sierra/linux_rh7/install/Python/3.6.10/bin:${PATH_TMP}"
envvar-unset PATH_TMP
use RHEL7_PYTHON

[RHEL7_ANACONDA3]
module load apps/anaconda3
use RHEL7_PYTHON

################################################################################
# intra node type: serial/openmp
################################################################################

[RHEL7_NODE-TYPE|OPENMP]
envvar-set OMP_NUM_THREADS : 2

[RHEL7_NODE-TYPE|SERIAL]
envvar-set OMP_PROC_BIND   : false
envvar-set OMP_NUM_THREADS : 1

[RHEL7_INTEL_NODE-TYPE|SERIAL]
module-load atdm-env
module-load atdm-mkl        : 18.0.5
envvar-set  LM_LICENSE_FILE : 28518@cee-infra009.sandia.gov
use RHEL7_NODE-TYPE|SERIAL

################################################################################
# toolchain env settings
################################################################################

[RHEL7_SEMS-GNU-8.3.0-OPENMPI-1.10.1]
use RHEL7_PRE
module-load sems-gcc : 8.3.0
use MPI-COMPILER-VARS
use RHEL7_SEMS_PARALLEL
use OMPI-GNU-VARS
module-unload       sems-boost
module-load         sems-boost        : 1.66.0/base
use RHEL7_POST

[RHEL7_SEMS-GNU-7.2.0]
use RHEL7_PRE
module-load sems-gcc : 7.2.0
use RHEL7_SEMS_BASE
use RHEL7_POST

[RHEL7_SEMS-GNU-7.2.0-OPENMPI-1.10.1]
use RHEL7_PRE
module-load sems-gcc : 7.2.0
use MPI-COMPILER-VARS
use RHEL7_SEMS_PARALLEL
use OMPI-GNU-VARS
use RHEL7_POST

[RHEL7_SEMS-CLANG-7.0.1-OPENMPI-1.10.1]
use RHEL7_PRE
module-load sems-gcc : 5.3.0
module-load sems-clang : 7.0.1
use MPI-COMPILER-VARS
use RHEL7_SEMS_PARALLEL
use OMPI-CLANG-VARS
use RHEL7_POST

[RHEL7_SEMS-CLANG-9.0.0-OPENMPI-1.10.1]
use RHEL7_PRE
module-load sems-gcc : 5.3.0
module-load sems-clang : 9.0.0
use MPI-COMPILER-VARS
use RHEL7_SEMS_PARALLEL
use OMPI-CLANG-VARS
use RHEL7_POST

[RHEL7_SEMS-CLANG-10.0.0-OPENMPI-1.10.1]
use RHEL7_PRE
module-load sems-gcc : 5.3.0
module-load sems-clang : 10.0.0
use MPI-COMPILER-VARS
use RHEL7_SEMS_PARALLEL
use OMPI-CLANG-VARS
module-unload sems-boost
module-load sems-boost: 1.69.0/base
module-unload sems-cmake
module-load sems-cmake: 3.17.1
use RHEL7_POST

[RHEL7_SEMS-INTEL-17.0.1-MPICH-3.2]
use RHEL7_PRE
module-load sems-gcc   : 5.3.0
# NOTE: although the asccoaited module loads warn gcc/4.9.3 is not supported,
# kokkos will not build with gcc/4.9.3
#module-load sems-gcc    : 4.9.3
module-load sems-intel  : 17.0.1
module-load sems-mpich  : 3.2
use RHEL7_SEMS_PARALLEL_INTEL
use MPI-COMPILER-VARS
use OMPI-INTEL-VARS
envvar-set-if-empty SEMS_SUPERLU_DIST_INCLUDE_PATH : ${SEMS_SUPERLU_DIST_ROOT}/include
envvar-set-if-empty SEMS_SUPERLU_DIST_LIBRARY_PATH : ${SEMS_SUPERLU_DIST_ROOT}/lib
envvar-set-if-empty SEMS_SCOTCH_INCLUDE_PATH       : ${SEMS_SCOTCH_ROOT}/include
envvar-set-if-empty SEMS_SCOTCH_LIBRARY_PATH       : ${SEMS_SCOTCH_ROOT}/lib
use RHEL7_POST

################################################################################
# fully qualified environment settings
################################################################################

[rhel7_sems-gnu-8.3.0-openmpi-1.10.1-openmp]
use RHEL7_SEMS-GNU-8.3.0-OPENMPI-1.10.1
use RHEL7_NODE-TYPE|OPENMP

[rhel7_sems-gnu-7.2.0-python-3.6.10-serial]
use RHEL7_SEMS-GNU-7.2.0
use RHEL7_NODE-TYPE|SERIAL
module-remove sems-ninja_fortran
module-load atdm-env
module-load atdm-ninja_fortran : 1.7.2
use RHEL7_SIERRA-PYTHON-3.6.10

[rhel7_sems-gnu-7.2.0-anaconda3-serial]
use RHEL7_SEMS-GNU-7.2.0
use RHEL7_NODE-TYPE|SERIAL
module-remove sems-ninja_fortran
module-load atdm-env
module-load atdm-ninja_fortran : 1.7.2
use RHEL7_ANACONDA3

[rhel7_sems-gnu-7.2.0-serial]
use RHEL7_SEMS-GNU-7.2.0
use RHEL7_NODE-TYPE|SERIAL

[rhel7_sems-gnu-7.2.0-openmpi-1.10.1-serial]
use RHEL7_SEMS-GNU-7.2.0-OPENMPI-1.10.1
use RHEL7_NODE-TYPE|SERIAL

[rhel7_sems-clang-7.0.1-openmpi-1.10.1-serial]
use RHEL7_SEMS-CLANG-7.0.1-OPENMPI-1.10.1
use RHEL7_NODE-TYPE|SERIAL

[rhel7_sems-clang-9.0.0-openmpi-1.10.1-serial]
use RHEL7_SEMS-CLANG-9.0.0-OPENMPI-1.10.1
use RHEL7_NODE-TYPE|SERIAL

[rhel7_sems-clang-10.0.0-openmpi-1.10.1-serial]
use RHEL7_SEMS-CLANG-10.0.0-OPENMPI-1.10.1
use RHEL7_NODE-TYPE|SERIAL

[rhel7_sems-intel-17.0.1-mpich-3.2-serial]
use RHEL7_SEMS-INTEL-17.0.1-MPICH-3.2
use RHEL7_INTEL_NODE-TYPE|SERIAL



#------------------------------------------------------------------------------
# ride / weaver
#------------------------------------------------------------------------------

# Partial environments intended to be `use`d within others.

[RIDE_PRE]
use MODULE-PURGE

[RIDE_POST]
use MPI-COMPILER-VARS
use OMPI-GNU-VARS
envvar-unset OMPI_CXX
module-load python : 3.7.3

[RIDE_CUDA]
envvar-set CUDA_LAUNCH_BLOCKING            : 1
envvar-set CUDA_MANAGED_FORCE_DEVICE_ALLOC : 1
envvar-set KOKKOS_NUM_DEVICES              : 2

[RIDE_OPENMP]
envvar-set OMP_NUM_THREADS : 2

[RIDE_GNU-7.2.0-OPENMPI-2.1.2]
use RIDE_PRE
module-load devpack  : 20180521/openmpi/2.1.2/gcc/7.2.0/cuda/9.2.88
module-swap openblas : netlib/3.8.0/gcc/7.2.0
use RIDE_POST
envvar-find-in-path OMPI_CXX : g++

# Full environments intended to be loaded.

[ride_cuda-9.2-gnu-7.2.0-openmpi-2.1.2]
use RIDE_PRE
module-load devpack  : 20180521/openmpi/2.1.2/gcc/7.2.0/cuda/9.2.88
module-swap openblas : netlib/3.8.0/gcc/7.2.0
use RIDE_POST
use RIDE_CUDA

[ride_cuda-10.1-gnu-7.2.0-openmpi-4.0.1]
use RIDE_PRE
module-load devpack : 20190404/openmpi/4.0.1/gcc/7.2.0/cuda/10.1.105
use RIDE_POST
use RIDE_CUDA

[ride_gnu-7.2.0-openmpi-2.1.2-openmp]
use RIDE_GNU-7.2.0-OPENMPI-2.1.2
use RIDE_OPENMP

[ride_gnu-7.2.0-openmpi-2.1.2-serial]
use RIDE_GNU-7.2.0-OPENMPI-2.1.2
