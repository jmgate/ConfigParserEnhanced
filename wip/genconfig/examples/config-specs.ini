# config-specs.ini
#
#------------------------------------------------------------------------------
#
# This is a configuration file for the `GenConfig` tool, used to specify what
# CMake configuration settings correspond to the various machines listed in
# `supported-systems.ini` and the flags/options in
# `supported-config-flags.ini`.
#
# INSERT SYNTAX EXAMPLE
#
# INSERT ORGANIZATION EXAMPLE
#
#------------------------------------------------------------------------------
#
# Adding a New Flag/Option Set
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#------------------------------------------------------------------------------
#
#
#
#------------------------------------------------------------------------------
#
#
#
#------------------------------------------------------------------------------
#
#
#
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
# Configuration settings common to all supported configurations.
#------------------------------------------------------------------------------

[COMMON]
# settings common to all configurations go here



#------------------------------------------------------------------------------
# System-specific tweaks to the common configuration.
#------------------------------------------------------------------------------

[machine-type-5]
use COMMON
# other system-specific settings here

[machine-type-4]
use COMMON
# other system-specific settings here

[machine-type-2]
use COMMON
# other system-specific settings here

[rhel7]
use COMMON
# other system-specific settings here

[machine-name-1]
use COMMON
# other system-specific settings here

[machine-type-1]
use COMMON
# other system-specific settings here

[machine-type-3]
use COMMON
# other system-specific settings here



#------------------------------------------------------------------------------
# Tweaks corresponding to flag-option pairs from `supported-config-flags.ini`.
#------------------------------------------------------------------------------



#
# build-type
#

[build-type-debug]
opt-set-cmake-var CMAKE_BUILD_TYPE STRING    : DEBUG
opt-set-cmake-var Trilinos_ENABLE_DEBUG BOOL : ON

[build-type-dbg]
use build-type-debug

[build-type-release]
opt-set-cmake-var CMAKE_BUILD_TYPE STRING    : RELEASE
opt-set-cmake-var Trilinos_ENABLE_DEBUG BOOL : OFF

[build-type-opt]
use build-type-release

[build-type-release-debug]
opt-set-cmake-var CMAKE_BUILD_TYPE STRING    : RELEASE
opt-set-cmake-var Trilinos_ENABLE_DEBUG BOOL : ON



#
# compiler
#

[compiler|gnu]
# blah

[compiler|clang]
# blah

[compiler|cuda]
# blah

[compiler|intel]
# blah



#
# kokkos-arch
#

[kokkos-arch|none]
# blah

[kokkos-arch|KNC]
# blah

[kokkos-arch|KNL]
# blah

[kokkos-arch|SNB]
# blah

[kokkos-arch|HSW]
# blah

[kokkos-arch|BDW]
# blah

[kokkos-arch|SKX]
# blah

[kokkos-arch|Kepler]
# blah

[kokkos-arch|Kepler30]
# blah

[kokkos-arch|Kepler32]
# blah

[kokkos-arch|Kepler35]
# blah

[kokkos-arch|Kepler37]
# blah

[kokkos-arch|Maxwell]
# blah

[kokkos-arch|Maxwell50]
# blah

[kokkos-arch|Maxwell52]
# blah

[kokkos-arch|Maxwell53]
# blah

[kokkos-arch|Pascal60]
# blah

[kokkos-arch|Pascal61]
# blah

[kokkos-arch|Volta70]
# blah

[kokkos-arch|Volta72]
# blah

[kokkos-arch|Turing75]
# blah

[kokkos-arch|Ampere80]
# blah

[kokkos-arch|Ampere86]
# blah

[kokkos-arch|ARMv80]
# blah

[kokkos-arch|ARMv81]
# blah

[kokkos-arch|ARMv8-ThunderX]
# blah

[kokkos-arch|ARMv8-TX2]
# blah

[kokkos-arch|A64FX]
# blah

[kokkos-arch|BGQ]
# blah

[kokkos-arch|Power7]
# blah

[kokkos-arch|Power8]
# blah

[kokkos-arch|Power9]
# blah

[kokkos-arch|Vega900]
# blah

[kokkos-arch|Vega906]
# blah

[kokkos-arch|Vega908]
# blah

[kokkos-arch|AMDAVX]
# blah

[kokkos-arch|Zen]
# blah

[kokkos-arch|Zen2]
# blah



#
# lib-type
#

[lib-type|static]
opt-set-cmake-var BUILD_SHARED_LIBS    BOOL : OFF
opt-set-cmake-var TPL_FIND_SHARED_LIBS BOOL : OFF
#SET(ATDM_TPL_LIB_EXT "a") # See ATDMDevEnvSettings.cmake for usage.  We may need to add logic functionality to SetProgramOptions.

[lib-type|shared]
opt-set-cmake-var BUILD_SHARED_LIBS    BOOL : ON
opt-set-cmake-var TPL_FIND_SHARED_LIBS BOOL : ON
#SET(ATDM_TPL_LIB_EXT "so") # See ATDMDevEnvSettings.cmake for usage.  We may need to add logic functionality to SetProgramOptions.



#
# node-type
#

[node-type|serial]
opt-set-cmake-var Trilinos_ENABLE_OpenMP          BOOL   : OFF
opt-set-cmake-var Kokkos_ENABLE_OPENMP            BOOL   : OFF
opt-set-cmake-var Phalanx_KOKKOS_DEVICE_TYPE      STRING : SERIAL
opt-set-cmake-var Tpetra_INST_SERIAL              BOOL   : ON
opt-set-cmake-var Kokkos_ENABLE_SERIAL            BOOL   : ON     # UNCLEAR IF THIS SHOULD BE HERE
opt-set-cmake-var Kokkos_ENABLE_CUDA_UVM          BOOL   : OFF
opt-set-cmake-var Kokkos_ENABLE_CUDA              BOOL   : OFF
opt-set-cmake-var Kokkos_ENABLE_CUDA_LAMBDA       BOOL   : OFF
opt-set-cmake-var Tpetra_INST_CUDA                BOOL   : OFF
opt-set-cmake-var Sacado_ENABLE_HIERARCHICAL_DFAD BOOL   : OFF
opt-set-cmake-var TPL_ENABLE_CUDA                 BOOL   : OFF
opt-set-cmake-var TPL_ENABLE_CUSPARSE             BOOL   : OFF

[node-type|cuda]
opt-set-cmake-var Trilinos_ENABLE_OpenMP          BOOL   : OFF
opt-set-cmake-var Kokkos_ENABLE_OPENMP            BOOL   : OFF
opt-set-cmake-var Phalanx_KOKKOS_DEVICE_TYPE      STRING : CUDA
opt-set-cmake-var Tpetra_INST_SERIAL              BOOL   : ON
opt-set-cmake-var Kokkos_ENABLE_SERIAL            BOOL   : OFF    # UNCLEAR IF THIS SHOULD BE HERE
opt-set-cmake-var Kokkos_ENABLE_CUDA_UVM          BOOL   : ON
opt-set-cmake-var Kokkos_ENABLE_CUDA              BOOL   : ON
opt-set-cmake-var Kokkos_ENABLE_CUDA_LAMBDA       BOOL   : ON
opt-set-cmake-var Tpetra_INST_CUDA                BOOL   : ON
opt-set-cmake-var Sacado_ENABLE_HIERARCHICAL_DFAD BOOL   : ON
opt-set-cmake-var TPL_ENABLE_CUDA                 BOOL   : ON
opt-set-cmake-var TPL_ENABLE_CUSPARSE             BOOL   : ON

[node-type|openmp]
opt-set-cmake-var Trilinos_ENABLE_OpenMP          BOOL   : ON
opt-set-cmake-var Kokkos_ENABLE_OPENMP            BOOL   : ON
opt-set-cmake-var Phalanx_KOKKOS_DEVICE_TYPE      STRING : OPENMP
opt-set-cmake-var Tpetra_INST_SERIAL              BOOL   : OFF
opt-set-cmake-var Kokkos_ENABLE_SERIAL            BOOL   : OFF    # UNCLEAR IF THIS SHOULD BE HERE
opt-set-cmake-var Kokkos_ENABLE_CUDA_UVM          BOOL   : OFF
opt-set-cmake-var Kokkos_ENABLE_CUDA              BOOL   : OFF
opt-set-cmake-var Kokkos_ENABLE_CUDA_LAMBDA       BOOL   : OFF
opt-set-cmake-var Tpetra_INST_CUDA                BOOL   : OFF
opt-set-cmake-var Sacado_ENABLE_HIERARCHICAL_DFAD BOOL   : OFF
opt-set-cmake-var TPL_ENABLE_CUDA                 BOOL   : OFF
opt-set-cmake-var TPL_ENABLE_CUSPARSE             BOOL   : OFF



#
# use-asan
#

[use-asan-asan]
opt-set-cmake-var CMAKE_CXX_FLAGS        STRING : ${CMAKE_CXX_FLAGS} -g -O1 -fsanitize=address -fno-omit-frame-pointer
opt-set-cmake-var CMAKE_EXE_LINKER_FLAGS STRING : ${CMAKE_EXE_LINKER_FLAGS} -ldl -fsanitize=address
# Note:  The section above somehow needs to be done only when `compiler` is `clang`.

[use-asan-no-asan]
# Nothing to do here.



#
# use-complex
#

[use-complex|no-complex]
opt-set-cmake-var Trilinos_ENABLE_COMPLEX BOOL : OFF

[use-complex|complex]
opt-set-cmake-var Trilinos_ENABLE_COMPLEX BOOL : ON



#
# use-fpic
#

[use-fpic|fpic]
opt-set-cmake-var CMAKE_POSITION_INDEPENDENT_CODE BOOL : ON

[use-fpic|no-fpic]
# Nothing to do here.



#
# use-mpi
#

[use-mpi|mpi]
opt-set-cmake-var CMAKE_C_COMPILER       FILEPATH : ${MPICC}
opt-set-cmake-var CMAKE_CXX_COMPILER     FILEPATH : ${MPICXX}
opt-set-cmake-var CMAKE_Fortran_COMPILER FILEPATH : ${MPIF90}
opt-set-cmake-var TPL_ENABLE_MPI         BOOL     : ON
# Note:  enable (par)metis/superludist if using SPARC settings + MPI
#        also look into other <tpl>_ROOT variables (CGNS, HDF5, NETCDF, etc.)

[use-mpi|no-mpi]
opt-set-cmake-var CMAKE_C_COMPILER       FILEPATH : ${SERIAL_CC}
opt-set-cmake-var CMAKE_CXX_COMPILER     FILEPATH : ${SERIAL_CXX}
opt-set-cmake-var CMAKE_Fortran_COMPILER FILEPATH : ${SERIAL_FC}
opt-set-cmake-var TPL_ENABLE_MPI         BOOL     : OFF
# Note:  disable (par)metis/superludist if not using SPARC settings + MPI
#        also look into other <tpl>_ROOT variables (CGNS, HDF5, NETCDF, etc.)



#
# use-pt
#

[use-pt|no-pt]
opt-set-cmake-var Trilinos_ENABLE_Fortran               BOOL : OFF
# Note:  The setting above would be flipped if ATDM_ENABLE_SPARC_SETTINGS is true, but I don't know how that variable plays into things yet.
opt-set-cmake-var Trilinos_ENABLE_SECONDARY_TESTED_CODE BOOL : ON

[use-pt|pt]
opt-set-cmake-var Trilinos_ENABLE_Fortran               BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_SECONDARY_TESTED_CODE BOOL : OFF



#
# use-rdc
#

[use-rdc|no-rdc]
opt-set-cmake-var Kokkos_ENABLE_CUDA_RELOCATABLE_DEVICE_CODE BOOL : OFF

[use-rdc|rdc]
opt-set-cmake-var CMAKE_CXX_FLAGS                            STRING : ${CMAKE_CXX_FLAGS} --remove-duplicate-link-files
# Note:  The setting above needs to somehow be done only when `compiler` is `cuda`.
opt-set-cmake-var Kokkos_ENABLE_CUDA_RELOCATABLE_DEVICE_CODE BOOL   : ON



#
# package-enables
#

[package-enables|none]
# Nothing to do here.

[package-enables|empire]
opt-set-cmake-var Gtest_SKIP_INSTALL              BOOL : TRUE
opt-set-cmake-var Trilinos_ENABLE_Gtest           BOOL : FALSE
opt-set-cmake-var Trilinos_ENABLE_Anasazi         BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_Panzer          BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_SEACASAprepro   BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_SEACASEpu       BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_SEACASExodiff   BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_SEACASNemslice  BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_SEACASNemspread BOOL : ON

[package-enables|sparc]
opt-set-cmake-var Trilinos_ENABLE_Amesos      BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_Amesos2     BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_Anasazi     BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_AztecOO     BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_Belos       BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_Epetra      BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_EpetraExt   BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_Gtest       BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_Ifpack      BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_Ifpack2     BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_Kokkos      BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_KokkosCore  BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_ML          BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_MueLu       BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_NOX         BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_ROL         BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_Sacado      BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_SEACAS      BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_STKSearch   BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_STKTransfer BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_STKUtil     BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_Stratimikos BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_Teko        BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_Teuchos     BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_Thyra       BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_Tpetra      BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_TriKota     BOOL : ON

[package-enables|sparc-mini-trilinos]
opt-set-cmake-var Trilinos_ENABLE_Kokkos BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_SEACAS BOOL : ON
opt-set-cmake-var Trilinos_ENABLE_Pamgen BOOL : OFF
opt-set-cmake-var TPL_ENABLE_METIS       BOOL : OFF
opt-set-cmake-var TPL_ENABLE_ParMETIS    BOOL : OFF
opt-set-cmake-var TPL_ENABLE_SuperLUDist BOOL : OFF
opt-set-cmake-var TPL_ENABLE_Boost       BOOL : OFF
opt-set-cmake-var TPL_ENABLE_BoostLib    BOOL : OFF

[package-enables|muelu]
# Turn on some MueLu-specific stuff.

[package-enables|jmgate]
# Turn on whatever stuff I care about.



# NOTES

[flag1|option1] # e.g., use-mpi|mpi; sections exist corresponding to each supported flag option
# settings for only this particular flag selection here
# should not `use` the COMMON or system-specific sections

[flag1|option2] # e.g., use-mpi|no-mpi
# settings for only this particular flag selection here

[package-enables|empire]
# turn on the packages used by the EMPIRE team

[package-enables|sparc]
# turn on the packages used by the SPARC team

# etc.
